library(ggplot2)
library(dplyr)
library(maps)
library(viridis)
library(knitr)
library(RColorBrewer)
library(tidyverse)
library(xts)
library(dygraphs)
library(lubridate)
library(kableExtra)
library(vars)
library(flexdashboard)
library(tidyverse)
library(plotly)
library(ggplot2)
library(dplyr)
library(maps)
library(viridis)
library(knitr)
library(RColorBrewer)
library(tidyverse)
library(xts)
library(dygraphs)
library(lubridate)
library(kableExtra)
library(vars)
library(tidytext)
install.packages("tidytext")
library(flexdashboard)
library(tidyverse)
library(plotly)
library(ggplot2)
library(dplyr)
library(maps)
library(viridis)
library(knitr)
library(RColorBrewer)
library(tidyverse)
library(xts)
library(dygraphs)
library(lubridate)
library(kableExtra)
library(vars)
library(tidytext)
library(glue)
library(stringr)
data1 <- read.csv("UFO-nuclear.csv")
data2 <- read.csv("nuclear_tidy.csv")
UK <- map_data("world") %>% filter(region=="UK")
p <- ggplot() +
geom_polygon(data = UK, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point( data=data1, aes(x=longitude, y=latitude, text=shape), colour = 'lightblue') +
theme_void() + ylim(50,59) + coord_map() +
geom_point(data = data2, aes(x=Longitude, y = Latitude, text = 'Nuclear facility'), colour = 'purple') +
geom_point(aes(x=-1.76625, y = 51.23731, text = 'Stonehenge'), colour = 'black')+
ggtitle('UFO sightings and nuclear plant locations') +
guides( colour = guide_legend()) +
theme(plot.title = element_text(size= 12, color = "#4e4d47"))
p <- plotly::ggplotly(p, tooltip = "text")
p
data1 <- read.csv("UFO-nuclear.csv")
fig <- plot_ly(data1, x = ~plant_in_city, y = ~City, type = 'bar', marker = list(color = 'teal'))
fig <- fig %>% layout(barmode = 'group',
xaxis = list(title = "Cities with nuclear plants and UFO sightings"),
yaxis = list(title = ""))
fig
data1 <- read.csv("UFO-nuclear.csv")
nuclear <- data1 %>% dplyr::filter(plant_in_city == 'Yes')
nuclear <- nuclear %>% dplyr::select(datetime, duration, shape, City)
fig <- plot_ly(nuclear, labels = ~duration, type = 'pie')
fig <- fig %>% layout(title = 'UFO event duration near nuclear plants')
fig
data1 <- read.csv("UFO-nuclear.csv")
nuclear <- data1 %>% dplyr::filter(plant_in_city == 'Yes')
nuclear <- nuclear %>% dplyr::select(datetime, duration, shape, City)
fig <- plot_ly(nuclear, x = ~shape, type = 'histogram', marker = list(color = 'purple', line = list(color = 'purple')))
fig <- fig %>% layout(barmode = 'group',
xaxis = list(title = "UFO shapes near nuclear plants"),
yaxis = list(title = ""))
fig
data1 <- read.csv("UFO-nuclear.csv")
nuclear <- data1 %>% dplyr::filter(plant_in_city == 'No')
nuclear <- nuclear %>% dplyr::select(datetime, duration, shape, City)
fig <- plot_ly(nuclear, labels = ~duration, type = 'pie')
fig <- fig %>% layout(title = 'UFO event duration near nuclear plants')
fig
data1 <- read.csv("UFO-nuclear.csv")
nuclear <- data1 %>% dplyr::filter(plant_in_city == 'No')
nuclear <- nuclear %>% dplyr::select(datetime, duration, shape, City)
fig <- plot_ly(nuclear, x = ~shape, type = 'histogram', marker = list(color = 'rgb(158,202,225)', line = list(color = 'rgb(8,48,107)')))
fig <- fig %>% layout(barmode = 'group',
xaxis = list(title = "UFO shapes near nuclear plants"),
yaxis = list(title = ""))
fig
data1 <- read.csv("UFO-nuclear.csv")
data1$datetime <- as.POSIXct(data1$datetime,format="%m/%d/%Y %H:%M")
df <- data1 %>% dplyr::select(datetime, duration, shape, City, Country, comments)
fig <- plot_ly(data = df, x = df$datetime, y = str_count(df$shape))
fig <- fig %>% layout(xaxis = list(title = "UFO reports since the 50's"))
fig
data1 <- read.csv("UFO-nuclear.csv")
comments <- data1$comments
data1 <- read.csv("UFO-nuclear.csv")
comments <- as.data.frame(data1$comments)
View(comments)
View(comments)
data1 <- read.csv("UFO-nuclear.csv")
comments <- as.data.frame(data1$comments)
write.table(comments, file="comments.csv", sep = ',', row.names=F, col.names=F)
# Install
install.packages("tm")  # for text mining
install.packages("SnowballC") # for text stemming
install.packages("wordcloud") # word-cloud generator
library(flexdashboard)
library(tidyverse)
library(plotly)
library(ggplot2)
library(dplyr)
library(maps)
library(viridis)
library(knitr)
library(RColorBrewer)
library(tidyverse)
library(xts)
library(dygraphs)
library(lubridate)
library(kableExtra)
library(vars)
library(tidytext)
library(glue)
library(stringr)
install.packages("tm")  # for text mining
install.packages("SnowballC") # for text stemming
install.packages("wordcloud") # word-cloud generator
library(flexdashboard)
library(tidyverse)
library(plotly)
library(ggplot2)
library(dplyr)
library(maps)
library(viridis)
library(knitr)
library(RColorBrewer)
library(tidyverse)
library(xts)
library(dygraphs)
library(lubridate)
library(kableExtra)
library(vars)
library(tidytext)
library(glue)
library(stringr)
# Load
library("tm")
library("SnowballC")
library("wordcloud")
install.packages("wordcloud")
library(flexdashboard)
library(tidyverse)
library(plotly)
library(ggplot2)
library(dplyr)
library(maps)
library(viridis)
library(knitr)
library(RColorBrewer)
library(tidyverse)
library(xts)
library(dygraphs)
library(lubridate)
library(kableExtra)
library(vars)
library(tidytext)
library(glue)
library(stringr)
library("tm")
library("SnowballC")
library("wordcloud")
library("syuzhet")
install.packages("syuzhet")
library(flexdashboard)
library(tidyverse)
library(plotly)
library(ggplot2)
library(dplyr)
library(maps)
library(viridis)
library(knitr)
library(RColorBrewer)
library(tidyverse)
library(xts)
library(dygraphs)
library(lubridate)
library(kableExtra)
library(vars)
library(tidytext)
library(glue)
library(stringr)
library("tm")
library("SnowballC")
library("wordcloud")
library("syuzhet")
data1 <- read.csv("UFO-nuclear.csv")
comments <- as.data.frame(data1$comments)
write.table(comments, file="comments.csv", sep = ',', row.names=F, col.names=F)
text <- readLines(file.choose())
data1 <- read.csv("UFO-nuclear.csv")
comments <- as.data.frame(data1$comments)
write.table(comments, file="comments.csv", sep = ',', row.names=F, col.names=F)
# Read the text file from local machine , choose file interactively
text <- readLines(file.choose())
# Load the data as a corpus
TextDoc <- Corpus(VectorSource(text))
#Replacing "/", "@" and "|" with space
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
TextDoc <- tm_map(TextDoc, toSpace, "/")
TextDoc <- tm_map(TextDoc, toSpace, "@")
TextDoc <- tm_map(TextDoc, toSpace, "\\|")
# Convert the text to lower case
TextDoc <- tm_map(TextDoc, content_transformer(tolower))
# Remove numbers
TextDoc <- tm_map(TextDoc, removeNumbers)
# Remove english common stopwords
TextDoc <- tm_map(TextDoc, removeWords, stopwords("english"))
# Remove your own stop word
# specify your custom stopwords as a character vector
TextDoc <- tm_map(TextDoc, removeWords, c("s", "company", "team"))
# Remove punctuations
TextDoc <- tm_map(TextDoc, removePunctuation)
# Eliminate extra white spaces
TextDoc <- tm_map(TextDoc, stripWhitespace)
# Text stemming - which reduces words to their root form
TextDoc <- tm_map(TextDoc, stemDocument)
# Build a term-document matrix
TextDoc_dtm <- TermDocumentMatrix(TextDoc)
dtm_m <- as.matrix(TextDoc_dtm)
# Sort by descearing value of frequency
dtm_v <- sort(rowSums(dtm_m),decreasing=TRUE)
dtm_d <- data.frame(word = names(dtm_v),freq=dtm_v)
# Display the top 5 most frequent words
head(dtm_d, 5)
# Plot the most frequent words
barplot(dtm_d[1:5,]$freq, las = 2, names.arg = dtm_d[1:5,]$word,
col ="lightgreen", main ="Top 5 most frequent words",
ylab = "Word frequencies")
#generate word cloud
set.seed(1234)
wordcloud(words = dtm_d$word, freq = dtm_d$freq, min.freq = 5,
max.words=100, random.order=FALSE, rot.per=0.40,
colors=brewer.pal(8, "Dark2"))
# Plot the most frequent words
barplot(dtm_d[1:5,]$freq, las = 2, names.arg = dtm_d[1:5,]$word,
col ="teal", main ="Top 5 most frequent words",
ylab = "Word frequencies")
# Plot the most frequent words
barplot(dtm_d[1:5,]$freq, las = 2, names.arg = dtm_d[1:5,]$word,
col ="lightblue", main ="Top 5 most frequent words",
ylab = "Word frequencies")
# Build a term-document matrix
TextDoc_dtm <- TermDocumentMatrix(TextDoc)
dtm_m <- as.matrix(TextDoc_dtm)
# Sort by descearing value of frequency
dtm_v <- sort(rowSums(dtm_m),decreasing=TRUE)
dtm_d <- data.frame(word = names(dtm_v),freq=dtm_v)
library(flexdashboard)
library(tidyverse)
library(plotly)
library(ggplot2)
library(dplyr)
library(maps)
library(viridis)
library(knitr)
library(RColorBrewer)
library(tidyverse)
library(xts)
library(dygraphs)
library(lubridate)
library(kableExtra)
library(vars)
library(tidytext)
library(glue)
library(stringr)
library("tm")
library("SnowballC")
library("wordcloud")
library("syuzhet")
# Plot the most frequent words
barplot(dtm_d[1:5,]$freq, las = 2, names.arg = dtm_d[1:5,]$word,
col ="lightblue",
ylab = "Word frequencies")
library(flexdashboard)
library(tidyverse)
library(plotly)
library(ggplot2)
library(dplyr)
library(maps)
library(viridis)
library(knitr)
library(RColorBrewer)
library(tidyverse)
library(xts)
library(dygraphs)
library(lubridate)
library(kableExtra)
library(vars)
library(tidytext)
library(glue)
library(stringr)
library("tm")
library("SnowballC")
library("wordcloud")
library("syuzhet")
data1 <- read.csv("UFO-nuclear.csv")
data2 <- read.csv("nuclear_tidy.csv")
UK <- map_data("world") %>% filter(region=="UK")
p <- ggplot() +
geom_polygon(data = UK, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point( data=data1, aes(x=longitude, y=latitude, text=shape), colour = 'lightblue') +
theme_void() + ylim(50,59) + coord_map() +
geom_point(data = data2, aes(x=Longitude, y = Latitude, text = 'Nuclear facility'), colour = 'purple') +
geom_point(aes(x=-1.76625, y = 51.23731, text = 'Stonehenge'), colour = 'black')+
ggtitle('UFO sightings and nuclear plant locations') +
guides( colour = guide_legend()) +
theme(plot.title = element_text(size= 12, color = "#4e4d47"))
p <- plotly::ggplotly(p, tooltip = "text")
p
data1 <- read.csv("UFO-nuclear.csv")
fig <- plot_ly(data1, x = ~plant_in_city, y = ~City, type = 'bar', marker = list(color = 'teal'))
fig <- fig %>% layout(barmode = 'group',
xaxis = list(title = "Cities with nuclear plants and UFO sightings"),
yaxis = list(title = ""))
fig
data1 <- read.csv("UFO-nuclear.csv")
nuclear <- data1 %>% dplyr::filter(plant_in_city == 'Yes')
nuclear <- nuclear %>% dplyr::select(datetime, duration, shape, City)
fig <- plot_ly(nuclear, labels = ~duration, type = 'pie')
fig <- fig %>% layout(title = 'UFO event duration near nuclear plants')
fig
data1 <- read.csv("UFO-nuclear.csv")
nuclear <- data1 %>% dplyr::filter(plant_in_city == 'Yes')
nuclear <- nuclear %>% dplyr::select(datetime, duration, shape, City)
fig <- plot_ly(nuclear, x = ~shape, type = 'histogram', marker = list(color = 'purple', line = list(color = 'purple')))
fig <- fig %>% layout(barmode = 'group',
xaxis = list(title = "UFO shapes near nuclear plants"),
yaxis = list(title = ""))
fig
data1 <- read.csv("UFO-nuclear.csv")
nuclear <- data1 %>% dplyr::filter(plant_in_city == 'No')
nuclear <- nuclear %>% dplyr::select(datetime, duration, shape, City)
fig <- plot_ly(nuclear, labels = ~duration, type = 'pie')
fig <- fig %>% layout(title = 'UFO event duration near nuclear plants')
fig
data1 <- read.csv("UFO-nuclear.csv")
nuclear <- data1 %>% dplyr::filter(plant_in_city == 'No')
nuclear <- nuclear %>% dplyr::select(datetime, duration, shape, City)
fig <- plot_ly(nuclear, x = ~shape, type = 'histogram', marker = list(color = 'rgb(158,202,225)', line = list(color = 'rgb(8,48,107)')))
fig <- fig %>% layout(barmode = 'group',
xaxis = list(title = "UFO shapes near nuclear plants"),
yaxis = list(title = ""))
fig
data1 <- read.csv("UFO-nuclear.csv")
data1$datetime <- as.POSIXct(data1$datetime,format="%m/%d/%Y %H:%M")
df <- data1 %>% dplyr::select(datetime, duration, shape, City, Country, comments)
fig <- plot_ly(data = df, x = df$datetime, y = str_count(df$shape))
fig <- fig %>% layout(xaxis = list(title = "UFO reports since the 50's"))
fig
data1 <- read.csv("UFO-nuclear.csv")
comments <- as.data.frame(data1$comments)
write.table(comments, file="comments.csv", sep = ',', row.names=F, col.names=F)
# Read the text file from local machine , choose file interactively
text <- readLines(file.choose())
# Load the data as a corpus
TextDoc <- Corpus(VectorSource(text))
#Replacing "/", "@" and "|" with space
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
TextDoc <- tm_map(TextDoc, toSpace, "/")
TextDoc <- tm_map(TextDoc, toSpace, "@")
TextDoc <- tm_map(TextDoc, toSpace, "\\|")
# Convert the text to lower case
TextDoc <- tm_map(TextDoc, content_transformer(tolower))
# Remove numbers
TextDoc <- tm_map(TextDoc, removeNumbers)
# Remove english common stopwords
TextDoc <- tm_map(TextDoc, removeWords, stopwords("english"))
# Remove your own stop word
# specify your custom stopwords as a character vector
TextDoc <- tm_map(TextDoc, removeWords, c("s", "company", "team"))
# Remove punctuations
TextDoc <- tm_map(TextDoc, removePunctuation)
# Eliminate extra white spaces
TextDoc <- tm_map(TextDoc, stripWhitespace)
# Text stemming - which reduces words to their root form
TextDoc <- tm_map(TextDoc, stemDocument)
# Build a term-document matrix
TextDoc_dtm <- TermDocumentMatrix(TextDoc)
dtm_m <- as.matrix(TextDoc_dtm)
# Sort by descearing value of frequency
dtm_v <- sort(rowSums(dtm_m),decreasing=TRUE)
dtm_d <- data.frame(word = names(dtm_v),freq=dtm_v)
# Plot the most frequent words
barplot(dtm_d[1:5,]$freq, las = 2, names.arg = dtm_d[1:5,]$word,
col ="lightblue",
ylab = "Word frequencies")
#generate word cloud
set.seed(1234)
wordcloud(words = dtm_d$word, freq = dtm_d$freq, min.freq = 5,
max.words=100, random.order=FALSE, rot.per=0.40,
colors=brewer.pal(8, "Dark2"))
#generate word cloud
set.seed(1234)
wordcloud(words = dtm_d$word, freq = dtm_d$freq, min.freq = 5,
max.words=100, random.order=FALSE, rot.per=0.40,
colors=brewer.pal(8, "Paired"))
library(flexdashboard)
library(tidyverse)
library(plotly)
library(ggplot2)
library(dplyr)
library(maps)
library(viridis)
library(knitr)
library(RColorBrewer)
library(tidyverse)
library(xts)
library(dygraphs)
library(lubridate)
library(kableExtra)
library(vars)
library(tidytext)
library(glue)
library(stringr)
library("tm")
library("SnowballC")
library("wordcloud")
library("syuzhet")
data1 <- read.csv("UFO-nuclear.csv")
data1$datetime <- as.POSIXct(data1$datetime,format="%m/%d/%Y %H:%M")
df <- data1 %>% dplyr::select(datetime, duration, shape, City, Country, comments)
fig <- plot_ly(data = df, x = df$datetime, y = str_count(df$shape))
fig <- fig %>% layout(xaxis = list(title = "UFO reports since the 50's"))
fig
data1 <- read.csv("UFO-nuclear.csv")
data1$datetime <- as.POSIXct(data1$datetime,format="%m/%d/%Y %H:%M")
df <- data1 %>% dplyr::select(datetime, duration, shape, City, Country, comments)
fig <- plot_ly(data = df, x = df$datetime, y = str_count(df$shape))
fig <- fig %>% layout(xaxis = list(title = "UFO reports since the 50's"))
fig
library(flexdashboard)
library(tidyverse)
library(plotly)
library(ggplot2)
library(dplyr)
library(maps)
library(viridis)
library(knitr)
library(RColorBrewer)
library(tidyverse)
library(xts)
library(dygraphs)
library(lubridate)
library(kableExtra)
library(vars)
library(tidytext)
library(glue)
library(stringr)
library("tm")
library("SnowballC")
library("wordcloud")
library("syuzhet")
data1 <- read.csv("UFO-nuclear.csv")
data1$datetime <- as.POSIXct(data1$datetime,format="%m/%d/%Y %H:%M")
df <- data1 %>% dplyr::select(datetime, duration, shape, City, Country, comments)
fig <- plot_ly(data = df, x = df$datetime, y = str_count(df$shape))
fig <- fig %>% layout(xaxis = list(title = "UFO reports since the 50's"))
fig
library(flexdashboard)
library(tidyverse)
library(plotly)
library(ggplot2)
library(dplyr)
library(maps)
library(viridis)
library(knitr)
library(RColorBrewer)
library(tidyverse)
library(xts)
library(dygraphs)
library(lubridate)
library(kableExtra)
library(vars)
library(tidytext)
library(glue)
library(stringr)
library("tm")
library("SnowballC")
library("wordcloud")
library("syuzhet")
data1 <- read.csv("UFO-nuclear.csv")
nuclear <- data1 %>% dplyr::filter(plant_in_city == 'No')
nuclear <- nuclear %>% dplyr::select(datetime, duration, shape, City)
fig <- plot_ly(nuclear, x = ~shape, type = 'histogram', marker = list(color = 'rgb(158,202,225)', line = list(color = 'rgb(8,48,107)')))
fig <- fig %>% layout(barmode = 'group',
xaxis = list(title = "UFO shapes near nuclear plants"),
yaxis = list(title = ""))
fig
data1 <- read.csv("UFO-nuclear.csv")
data1$datetime <- as.POSIXct(data1$datetime,format="%m/%d/%Y %H:%M")
df <- data1 %>% dplyr::select(datetime, duration, shape, City, Country, comments)
fig <- plot_ly(data = df, x = df$datetime, y = str_count(df$shape))
fig <- fig %>% layout(xaxis = list(title = "UFO reports since the 50's"))
fig
